3.1.15 (Brainy Betty)
b275670dbda9a1e1d3d991a86dcf7e19f28e0ea0
o:Sass::Tree::RootNode
:@template"ÑH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari, Chrome, and Firefox all support 3D transforms. However,
// only in the most recent builds. You should also provide fallback 2d support for
// Opera and IE. IE10 is slated to have 3d enabled, but is currently unreleased.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Firefox.

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:@has_childrenT:@options{ :@children[io:Sass::Tree::ImportNode
;0;@:@imported_filename"shared;	[ :
@lineio:Sass::Tree::CommentNode;@:
@loud0;	[ :@value["p/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari, Chrome, and Firefox all support 3D transforms. However,
 * only in the most recent builds. You should also provide fallback 2d support for
 * Opera and IE. IE10 is slated to have 3d enabled, but is currently unreleased.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Firefox. */;i:@silenti o;;@;0;	[ ;["¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */;i;i o;;@;0;	[ ;["Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */;i;i o;;@;0;	[ ;["p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */;i ;i o;;@;0;	[ ;["a/* Defaults ------------------------------------------------------------------
 * @doc on */;i4;i o;;@;0;	[ ;["./* The default x-origin for transforms */;i7;i o:Sass::Tree::VariableNode:
@name"default-origin-x;@:@guarded"!default;	[ ;i8:
@expro:Sass::Script::Number:@numerator_units["%;@:@original"50%:@denominator_units[ ;i7;i8o;;@;0;	[ ;["./* The default y-origin for transforms */;i9;i o;;"default-origin-y;@;"!default;	[ ;i:;o;;["%;@;"50%;[ ;i7;i:o;;@;0;	[ ;["./* The default z-origin for transforms */;i;;i o;;"default-origin-z;@;"!default;	[ ;i<;o;;["%;@;"50%;[ ;i7;i<o;;@;0;	[ ;["//* The default x-multiplier for scaling */;i?;i o;;"default-scale-x;@;"!default;	[ ;i@;o;;[ ;@;"	1.25;[ ;f	1.25;i@o;;@;0;	[ ;["//* The default y-multiplier for scaling */;iA;i o;;"default-scale-y;@;"!default;	[ ;iB;o:Sass::Script::Variable	:@underscored_name"default_scale_x;"default-scale-x;@;iBo;;@;0;	[ ;["//* The default z-multiplier for scaling */;iC;i o;;"default-scale-z;@;"!default;	[ ;iD;o;	;"default_scale_x;"default-scale-x;@;iDo;;@;0;	[ ;["*/* The default angle for rotations */;iG;i o;;"default-rotate;@;"!default;	[ ;iH;o;;["deg;@;"
45deg;[ ;i2;iHo;;@;0;	[ ;["</* The default x-vector for the axis of 3d rotations */;iK;i o;;"default-vector-x;@;"!default;	[ ;iL;o;;[ ;@;"1;@R;i;iLo;;@;0;	[ ;["</* The default y-vector for the axis of 3d rotations */;iM;i o;;"default-vector-y;@;"!default;	[ ;iN;o;;[ ;@;"1;@R;i;iNo;;@;0;	[ ;["</* The default z-vector for the axis of 3d rotations */;iO;i o;;"default-vector-z;@;"!default;	[ ;iP;o;;[ ;@;"1;@R;i;iPo;;@;0;	[ ;["0/* The default x-length for translations */;iS;i o;;"default-translate-x;@;"!default;	[ ;iT;o;;["em;@;"1em;[ ;i;iTo;;@;0;	[ ;["0/* The default y-length for translations */;iU;i o;;"default-translate-y;@;"!default;	[ ;iV;o;	;"default_translate_x;"default-translate-x;@;iVo;;@;0;	[ ;["0/* The default z-length for translations */;iW;i o;;"default-translate-z;@;"!default;	[ ;iX;o;	;"default_translate_x;"default-translate-x;@;iXo;;@;0;	[ ;["*/* The default x-angle for skewing */;i[;i o;;"default-skew-x;@;"!default;	[ ;i\;o;;["deg;@;"	5deg;[ ;i
;i\o;;@;0;	[ ;["*/* The default y-angle for skewing */;i];i o;;"default-skew-y;@;"!default;	[ ;i^;o;;["deg;@;"	5deg;[ ;i
;i^o;;@;0;	[ ;["/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */;ia;i o:Sass::Tree::MixinDefNode;"apply-origin;T;@;	[o;;"only3d;@;0;	[ ;im;o:Sass::Script::Operation
:@operand2o;
;o;;[ ;@;"2;@R;i;im:@operand1o:Sass::Script::Funcall
;"-compass-list-size:@keywords{ ;@;im:
@args[o;
;"-compass-list; { ;@;im;![o;	;"origin;"origin;@;im;@;im:@operator:gt;o;	;"only3d;"only3d;@;im;@;im;":oru:Sass::Tree::IfNode [o:Sass::Script::Variable	:@underscored_name"only3d:
@name"only3d:@options{ :
@lineinu:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:
@name"experimental:@keywords{ :@options{ :@children[ :
@lineiu:
@args[o:Sass::Script::String	:
@type:identifier;@
:@value"transform-origin;
iso:Sass::Script::Variable	:@underscored_name"origin;"origin;@
;
iso;	;;;@
;"	-moz;
ito;	;;;@
;"-webkit;
ito;	;;;@
;"-o;
ito;	;;;@
;"-ms;
ito:!Sass::Script::UnaryOperation	;@
:@operando;	;;;@
;"-khtml;
it;
it:@operator:noto;	;;;@
;"official;
it[o:Sass::Tree::MixinNode;"experimental:@keywords{ ;@	:@children[ ;	iq:
@args[o:Sass::Script::String	:
@type:identifier;@	:@value"transform-origin;	ioo; 	;"origin;"origin;@	;	ioo:!Sass::Script::UnaryOperation	;@	:@operando;	;;;@	;"	-moz;	ip;	ip:@operator:noto;	;;;@	;"-webkit;	ipo;	;@	;o;	;;;@	;"-o;	ip;	ip;;o;	;@	;o;	;;;@	;"-ms;	ip;	ip;;o;	;@	;o;	;;;@	;"-khtml;	ip;	ip;;o;	;;;@	;"official;	ip;il;![[o;;"origin;"origin;@0[o;;"only3d;"only3d;@0o;;@;0;	[ ;["#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */;iy;i o;;"transform-origin;T;@;	[o;;"origin;@;0;	[ ;i;o;
;"unquote; { ;@;i;![o:Sass::Script::String	:
@type:string;@;" ;iu;%[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:@underscored_name"origin_z:
@name"origin-z:@options{ :
@linei:@operand1o; 
;o;	;"origin_y;	"origin-y;
@
;i;o;	;"origin_x;	"origin-x;
@
;i;
@
;i:@operator:or;
@
;i;;0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:@underscored_name"origin_x:
@name"origin-x:@options{ :
@lineiu:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:
@name"origin:@options{ :@guarded0:@children[ :
@linei:
@expro:Sass::Script::Number:@numerator_units["%;@	:@original"50%:@denominator_units[ :@valuei7;
i[o:Sass::Tree::VariableNode;"origin;@	:@guarded0:@children[ ;	i:
@expro; 	;"origin_x;"origin-x;@	;	iu;Þ[o:Sass::Script::Variable	:@underscored_name"origin_y:
@name"origin-y:@options{ :
@lineiu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:@underscored_name"origin_z:
@name"origin-z:@options{ :
@linei0[o:Sass::Tree::VariableNode;"origin;@	:@guarded0:@children[ ;	i:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"origin;"origin;@	;	io:Sass::Script::Number:@numerator_units["%;@	:@original"50%:@denominator_units[ ;i7;	i;	i[o:Sass::Tree::VariableNode;"origin;@	:@guarded0:@children[ ;	i:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"origin;"origin;@	;	io; 	;"origin_y;"origin-y;@	;	i;	iu;5[o:Sass::Script::Variable	:@underscored_name"origin_z:
@name"origin-z:@options{ :
@linei0[o:Sass::Tree::VariableNode;"origin;@	:@guarded0:@children[ ;	i:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"origin;"origin;@	;	io; 	;"origin_z;"origin-z;@	;	i;	io:Sass::Tree::MixinNode;	"apply-origin:@keywords{ ;
@
:@children[ ;i:
@args[o;	;"origin;	"origin;
@
;io;	;"only3d;	"only3d;
@
;i;i;![	[o;;"origin_x;"origin-x;@o;	;"default_origin_x;"default-origin-x;@;i|[o;;"origin_y;"origin-y;@o;	;"default_origin_y;"default-origin-y;@;i}[o;;"origin_z;"origin-z;@o:Sass::Script::Bool;@;F;i~[o;;"only3d;"only3d;@o;
;"if; { ;@;i;![o;	;"origin_z;"origin-z;@;io;);@;T;io;);@;F;io;;@;0;	[ ;["¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */;i;i o;;"transform;T;@;	[u;%6[o:Sass::Script::Variable	:@underscored_name"only3d:
@name"only3d:@options{ :
@lineiu:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:
@name"experimental:@keywords{ :@options{ :@children[ :
@linei:
@args[o:Sass::Script::String	:
@type:identifier;@
:@value"transform;
io:Sass::Script::Variable	:@underscored_name"transform;"transform;@
;
io;	;;;@
;"	-moz;
io;	;;;@
;"-webkit;
io;	;;;@
;"-o;
io;	;;;@
;"-ms;
io:!Sass::Script::UnaryOperation	;@
:@operando;	;;;@
;"-khtml;
i;
i:@operator:noto;	;;;@
;"official;
i[o:Sass::Tree::MixinNode;"experimental:@keywords{ ;@	:@children[ ;	i:
@args[o:Sass::Script::String	:
@type:identifier;@	:@value"transform;	io; 	;"transform;"transform;@	;	io:!Sass::Script::UnaryOperation	;@	:@operando;	;;;@	;"	-moz;	i;	i:@operator:noto;	;;;@	;"-webkit;	io;	;@	;o;	;;;@	;"-o;	i;	i;;o;	;@	;o;	;;;@	;"-ms;	i;	i;;o;	;@	;o;	;;;@	;"-khtml;	i;	i;;o;	;;;@	;"official;	i;i;![[o;;"transform;"transform;@0[o;;"only3d;"only3d;@o;);@;F;io;;@;0;	[ ;["D/* Shortcut to target all browsers with 2D transform support */;i;i o;;"transform2d;T;@;	[o:Sass::Tree::MixinNode;"transform; { ;@;	[ ;i¡;![o;	;"
trans;"
trans;@;i¡o;);@;F;i¡;i ;![[o;;"
trans;"
trans;@0o;;@;0;	[ ;["E/* Shortcut to target only browsers with 3D transform support */;i¤;i o;;"transform3d;T;@;	[o;*;"transform; { ;@;	[ ;i¦;![o;	;"
trans;"
trans;@;i¦o;);@;T;i¦;i¥;![[o;;"
trans;"
trans;@0o;;@;0;	[ ;["m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */;i©;i o;;@;0;	[ ;["`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */;i­;i o;;"perspective;T;@;	[o;*;"experimental; { ;@;	[ ;i·;![o;&	;':identifier;@;"perspective;iµo;	;"p;"p;@;iµo:!Sass::Script::UnaryOperation	;@:@operando;&	;';+;@;"	-moz;i¶;i¶;":noto;&	;';+;@;"-webkit;i¶o;,	;@;-o;&	;';+;@;"-o;i¶;i¶;";.o;,	;@;-o;&	;';+;@;"-ms;i¶;i¶;";.o;,	;@;-o;&	;';+;@;"-khtml;i¶;i¶;";.o;&	;';+;@;"official;i¶;i´;![[o;;"p;"p;@0o;;@;0;	[ ;["¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */;iº;i o;;"perspective-origin;T;@;	[o;*;"experimental; { ;@;	[ ;iÂ;![o;&	;';+;@;"perspective-origin;iÀo;	;"origin;"origin;@;iÀo;,	;@;-o;&	;';+;@;"	-moz;iÁ;iÁ;";.o;&	;';+;@;"-webkit;iÁo;,	;@;-o;&	;';+;@;"-o;iÁ;iÁ;";.o;,	;@;-o;&	;';+;@;"-ms;iÁ;iÁ;";.o;,	;@;-o;&	;';+;@;"-khtml;iÁ;iÁ;";.o;&	;';+;@;"official;iÁ;i¿;![[o;;"origin;"origin;@o;;["%;@;"50%;[ ;i7;i¿o;;@;0;	[ ;["÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */;iÅ;i o;;"transform-style;T;@;	[o;*;"experimental; { ;@;	[ ;iÎ;![o;&	;';+;@;"transform-style;iÌo;	;"
style;"
style;@;iÌo;,	;@;-o;&	;';+;@;"	-moz;iÍ;iÍ;";.o;&	;';+;@;"-webkit;iÍo;,	;@;-o;&	;';+;@;"-o;iÍ;iÍ;";.o;,	;@;-o;&	;';+;@;"-ms;iÍ;iÍ;";.o;,	;@;-o;&	;';+;@;"-khtml;iÍ;iÍ;";.o;&	;';+;@;"official;iÍ;iË;![[o;;"
style;"
style;@o;&	;';+;@;"preserve-3d;iËo;;@;0;	[ ;["ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */;iÑ;i o;;"backface-visibility;T;@;	[o;*;"experimental; { ;@;	[ ;iÚ;![o;&	;';+;@;"backface-visibility;iØo;	;"visibility;"visibility;@;iØo;,	;@;-o;&	;';+;@;"	-moz;iÙ;iÙ;";.o;&	;';+;@;"-webkit;iÙo;,	;@;-o;&	;';+;@;"-o;iÙ;iÙ;";.o;,	;@;-o;&	;';+;@;"-ms;iÙ;iÙ;";.o;,	;@;-o;&	;';+;@;"-khtml;iÙ;iÙ;";.o;&	;';+;@;"official;iÙ;i×;![[o;;"visibility;"visibility;@o;&	;';+;@;"hidden;i×o;;@;0;	[ ;["S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */;iÝ;i o;;@;0;	[ ;["a/* Scale ---------------------------------------------------------------------
 * @doc on */;iä;i o;;@;0;	[ ;["¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iç;i o;;"
scale;T;@;	[o;;"
trans;@;0;	[ ;iö;o;
;"
scale; { ;@;iö;![o;	;"scale_x;"scale-x;@;iöo;	;"scale_y;"scale-y;@;iöu;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@linei÷0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i÷:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	i÷:
@args[o; 	;"perspective;"perspective;@	;	i÷o; 	;"
trans;"
trans;@	;	i÷;	i÷o;*;"transform; { ;@;	[ ;iø;![o;	;"
trans;"
trans;@;iøo;	;"only3d;"only3d;@;iø;iõ;![	[o;;"scale_x;"scale-x;@o;	;"default_scale_x;"default-scale-x;@;iñ[o;;"scale_y;"scale-y;@o;	;"scale_x;"scale-x;@;iò[o;;"perspective;"perspective;@o;);@;F;ió[o;;"only3d;"only3d;@o;);@;F;iôo;;@;0;	[ ;["¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iû;i o;;"scaleX;T;@;	[o;;"
trans;@;0;	[ ;i;o;
;"scaleX; { ;@;i;![o;	;"
scale;"
scale;@;iu;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@linei0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	i:
@args[o; 	;"perspective;"perspective;@	;	io; 	;"
trans;"
trans;@	;	i;	io;*;"transform; { ;@;	[ ;i;![o;	;"
trans;"
trans;@;io;	;"only3d;"only3d;@;i;i;![[o;;"
scale;"
scale;@o;	;"default_scale_x;"default-scale-x;@;i [o;;"perspective;"perspective;@o;);@;F;i[o;;"only3d;"only3d;@o;);@;F;io;;@;0;	[ ;["¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i	;i o;;"scaleY;T;@;	[o;;"
trans;@;0;	[ ;i;o;
;"scaleY; { ;@;i;![o;	;"
scale;"
scale;@;iu;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@linei0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	i:
@args[o; 	;"perspective;"perspective;@	;	io; 	;"
trans;"
trans;@	;	i;	io;*;"transform; { ;@;	[ ;i;![o;	;"
trans;"
trans;@;io;	;"only3d;"only3d;@;i;i;![[o;;"
scale;"
scale;@o;	;"default_scale_y;"default-scale-y;@;i[o;;"perspective;"perspective;@o;);@;F;i[o;;"only3d;"only3d;@o;);@;F;io;;@;0;	[ ;["/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;i o;;"scaleZ;T;@;	[o;;"
trans;@;0;	[ ;i;o;
;"scaleZ; { ;@;i;![o;	;"
scale;"
scale;@;iu;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@linei 0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i :
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	i :
@args[o; 	;"perspective;"perspective;@	;	i o; 	;"
trans;"
trans;@	;	i ;	i o;*;"transform3d; { ;@;	[ ;i!;![o;	;"
trans;"
trans;@;i!;i;![[o;;"
scale;"
scale;@o;	;"default_scale_z;"default-scale-z;@;i[o;;"perspective;"perspective;@o;);@;F;io;;@;0;	[ ;["·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i$;i o;;"scale3d;T;@;	[o;;"
trans;@;0;	[ ;i.;o;
;"scale3d; { ;@;i.;![o;	;"scale_x;"scale-x;@;i.o;	;"scale_y;"scale-y;@;i.o;	;"scale_z;"scale-z;@;i.u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@linei/0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i/:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	i/:
@args[o; 	;"perspective;"perspective;@	;	i/o; 	;"
trans;"
trans;@	;	i/;	i/o;*;"transform3d; { ;@;	[ ;i0;![o;	;"
trans;"
trans;@;i0;i-;![	[o;;"scale_x;"scale-x;@o;	;"default_scale_x;"default-scale-x;@;i)[o;;"scale_y;"scale-y;@o;	;"default_scale_y;"default-scale-y;@;i*[o;;"scale_z;"scale-z;@o;	;"default_scale_z;"default-scale-z;@;i+[o;;"perspective;"perspective;@o;);@;F;i,o;;@;0;	[ ;["m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */;i3;i o;;@;0;	[ ;["ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i7;i o;;"rotate;T;@;	[o;;"
trans;@;0;	[ ;iA;o;
;"rotate; { ;@;iA;![o;	;"rotate;"rotate;@;iAu;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@lineiB0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	iB:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	iB:
@args[o; 	;"perspective;"perspective;@	;	iBo; 	;"
trans;"
trans;@	;	iB;	iBo;*;"transform; { ;@;	[ ;iC;![o;	;"
trans;"
trans;@;iCo;	;"only3d;"only3d;@;iC;i@;![[o;;"rotate;"rotate;@o;	;"default_rotate;"default-rotate;@;i=[o;;"perspective;"perspective;@o;);@;F;i>[o;;"only3d;"only3d;@o;);@;F;i?o;;@;0;	[ ;["/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iF;i o;;"rotateZ;T;@;	[o;*;"rotate; { ;@;	[ ;iN;![o;	;"rotate;"rotate;@;iNo;	;"perspective;"perspective;@;iNo;	;"only3d;"only3d;@;iN;iM;![[o;;"rotate;"rotate;@o;	;"default_rotate;"default-rotate;@;iJ[o;;"perspective;"perspective;@o;);@;F;iK[o;;"only3d;"only3d;@o;);@;F;iLo;;@;0;	[ ;["¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iQ;i o;;"rotateX;T;@;	[o;;"
trans;@;0;	[ ;iY;o;
;"rotateX; { ;@;iY;![o;	;"rotate;"rotate;@;iYu;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@lineiZ0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	iZ:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	iZ:
@args[o; 	;"perspective;"perspective;@	;	iZo; 	;"
trans;"
trans;@	;	iZ;	iZo;*;"transform3d; { ;@;	[ ;i[;![o;	;"
trans;"
trans;@;i[;iX;![[o;;"rotate;"rotate;@o;	;"default_rotate;"default-rotate;@;iV[o;;"perspective;"perspective;@o;);@;F;iWo;;@;0;	[ ;["§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i^;i o;;"rotateY;T;@;	[o;;"
trans;@;0;	[ ;if;o;
;"rotateY; { ;@;if;![o;	;"rotate;"rotate;@;ifu;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@lineig0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	ig:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	ig:
@args[o; 	;"perspective;"perspective;@	;	igo; 	;"
trans;"
trans;@	;	ig;	igo;*;"transform3d; { ;@;	[ ;ih;![o;	;"
trans;"
trans;@;ih;ie;![[o;;"rotate;"rotate;@o;	;"default_rotate;"default-rotate;@;ic[o;;"perspective;"perspective;@o;);@;F;ido;;@;0;	[ ;["¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;ik;i o;;"rotate3d;T;@;	[o;;"
trans;@;0;	[ ;iy;o;
;"rotate3d; { ;@;iy;![	o;	;"vector_x;"vector-x;@;iyo;	;"vector_y;"vector-y;@;iyo;	;"vector_z;"vector-z;@;iyo;	;"rotate;"rotate;@;iyu;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@lineiz0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	iz:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	iz:
@args[o; 	;"perspective;"perspective;@	;	izo; 	;"
trans;"
trans;@	;	iz;	izo;*;"transform3d; { ;@;	[ ;i{;![o;	;"
trans;"
trans;@;i{;ix;![
[o;;"vector_x;"vector-x;@o;	;"default_vector_x;"default-vector-x;@;is[o;;"vector_y;"vector-y;@o;	;"default_vector_y;"default-vector-y;@;it[o;;"vector_z;"vector-z;@o;	;"default_vector_z;"default-vector-z;@;iu[o;;"rotate;"rotate;@o;	;"default_rotate;"default-rotate;@;iv[o;;"perspective;"perspective;@o;);@;F;iwo;;@;0;	[ ;["m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */;i~;i o;;@;0;	[ ;["5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;i o;;"translate;T;@;	[o;;"
trans;@;0;	[ ;i;o;
;"translate; { ;@;i;![o;	;"translate_x;"translate-x;@;io;	;"translate_y;"translate-y;@;iu;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@linei0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	i:
@args[o; 	;"perspective;"perspective;@	;	io; 	;"
trans;"
trans;@	;	i;	io;*;"transform; { ;@;	[ ;i;![o;	;"
trans;"
trans;@;io;	;"only3d;"only3d;@;i;i;![	[o;;"translate_x;"translate-x;@o;	;"default_translate_x;"default-translate-x;@;i[o;;"translate_y;"translate-y;@o;	;"default_translate_y;"default-translate-y;@;i[o;;"perspective;"perspective;@o;);@;F;i[o;;"only3d;"only3d;@o;);@;F;io;;@;0;	[ ;["³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i;i o;;"translateX;T;@;	[o;;"
trans;@;0;	[ ;i;o;
;"translateX; { ;@;i;![o;	;"trans_x;"trans-x;@;iu;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@linei0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	i:
@args[o; 	;"perspective;"perspective;@	;	io; 	;"
trans;"
trans;@	;	i;	io;*;"transform; { ;@;	[ ;i;![o;	;"
trans;"
trans;@;io;	;"only3d;"only3d;@;i;i;![[o;;"trans_x;"trans-x;@o;	;"default_translate_x;"default-translate-x;@;i[o;;"perspective;"perspective;@o;);@;F;i[o;;"only3d;"only3d;@o;);@;F;io;;@;0;	[ ;["³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i ;i o;;"translateY;T;@;	[o;;"
trans;@;0;	[ ;i©;o;
;"translateY; { ;@;i©;![o;	;"trans_y;"trans-y;@;i©u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@lineiª0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	iª:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	iª:
@args[o; 	;"perspective;"perspective;@	;	iªo; 	;"
trans;"
trans;@	;	iª;	iªo;*;"transform; { ;@;	[ ;i«;![o;	;"
trans;"
trans;@;i«o;	;"only3d;"only3d;@;i«;i¨;![[o;;"trans_y;"trans-y;@o;	;"default_translate_y;"default-translate-y;@;i¥[o;;"perspective;"perspective;@o;);@;F;i¦[o;;"only3d;"only3d;@o;);@;F;i§o;;@;0;	[ ;["ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i®;i o;;"translateZ;T;@;	[o;;"
trans;@;0;	[ ;i¶;o;
;"translateZ; { ;@;i¶;![o;	;"trans_z;"trans-z;@;i¶u;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@linei·0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i·:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	i·:
@args[o; 	;"perspective;"perspective;@	;	i·o; 	;"
trans;"
trans;@	;	i·;	i·o;*;"transform3d; { ;@;	[ ;i¸;![o;	;"
trans;"
trans;@;i¸;iµ;![[o;;"trans_z;"trans-z;@o;	;"default_translate_z;"default-translate-z;@;i³[o;;"perspective;"perspective;@o;);@;F;i´o;;@;0;	[ ;["Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;i»;i o;;"translate3d;T;@;	[o;;"
trans;@;0;	[ ;iÅ;o;
;"translate3d; { ;@;iÅ;![o;	;"translate_x;"translate-x;@;iÅo;	;"translate_y;"translate-y;@;iÅo;	;"translate_z;"translate-z;@;iÅu;%[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@lineiÆ0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	iÆ:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	iÆ:
@args[o; 	;"perspective;"perspective;@	;	iÆo; 	;"
trans;"
trans;@	;	iÆ;	iÆo;*;"transform3d; { ;@;	[ ;iÇ;![o;	;"
trans;"
trans;@;iÇ;iÄ;![	[o;;"translate_x;"translate-x;@o;	;"default_translate_x;"default-translate-x;@;iÀ[o;;"translate_y;"translate-y;@o;	;"default_translate_y;"default-translate-y;@;iÁ[o;;"translate_z;"translate-z;@o;	;"default_translate_z;"default-translate-z;@;iÂ[o;;"perspective;"perspective;@o;);@;F;iÃo;;@;0;	[ ;["m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */;iÊ;i o;;@;0;	[ ;["ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iÎ;i o;;"	skew;T;@;	[o;;"
trans;@;0;	[ ;iÚ;o;
;"	skew; { ;@;iÚ;![o;	;"skew_x;"skew-x;@;iÚo;	;"skew_y;"skew-y;@;iÚo;*;"transform; { ;@;	[ ;iÛ;![o;	;"
trans;"
trans;@;iÛo;	;"only3d;"only3d;@;iÛ;iÙ;![[o;;"skew_x;"skew-x;@o;	;"default_skew_x;"default-skew-x;@;iÖ[o;;"skew_y;"skew-y;@o;	;"default_skew_y;"default-skew-y;@;i×[o;;"only3d;"only3d;@o;);@;F;iØo;;@;0;	[ ;["/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iÞ;i o;;"
skewX;T;@;	[o;;"
trans;@;0;	[ ;iç;o;
;"
skewX; { ;@;iç;![o;	;"skew_x;"skew-x;@;iço;*;"transform; { ;@;	[ ;iè;![o;	;"
trans;"
trans;@;ièo;	;"only3d;"only3d;@;iè;iæ;![[o;;"skew_x;"skew-x;@o;	;"default_skew_x;"default-skew-x;@;iä[o;;"only3d;"only3d;@o;);@;F;iåo;;@;0;	[ ;["/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;ië;i o;;"
skewY;T;@;	[o;;"
trans;@;0;	[ ;iô;o;
;"
skewY; { ;@;iô;![o;	;"skew_y;"skew-y;@;iôo;*;"transform; { ;@;	[ ;iõ;![o;	;"
trans;"
trans;@;iõo;	;"only3d;"only3d;@;iõ;ió;![[o;;"skew_y;"skew-y;@o;	;"default_skew_y;"default-skew-y;@;iñ[o;;"only3d;"only3d;@o;);@;F;iòo;;@;0;	[ ;["/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;iù;i o;;"create-transform;T;@;	[o;;"
trans;@;0;	[ ;i;o;
;"unquote; { ;@;i;![o;&	;';(;@;" ;io;;@;0;	[ ;["/* perspective */;i;i u;%.[o:Sass::Script::Variable	:@underscored_name"perspective:
@name"perspective:@options{ :
@linei0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i:
@expro:Sass::Script::Funcall
;"perspective:@keywords{ ;@	;	i:
@args[o; 	;"perspective;"perspective;@	;	io;;@;0;	[ ;["/* scale */;i;i u;%Ê[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:@underscored_name"scale_y:
@name"scale-y:@options{ :
@linei:@operand1o;	;"scale_x;	"scale-x;
@
;i;
@
;i:@operator:andu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:@underscored_name"scale_x:
@name"scale-x:@options{ :
@linei0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	io:Sass::Script::Funcall
;"scaleX:@keywords{ ;@	;	i:
@args[o; 	;"scale_x;"scale-x;@	;	i;	iu; v[o:Sass::Script::Variable	:@underscored_name"scale_y:
@name"scale-y:@options{ :
@linei 0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i :
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	i o:Sass::Script::Funcall
;"scaleY:@keywords{ ;@	;	i :
@args[o; 	;"scale_y;"scale-y;@	;	i ;	i u; v[o:Sass::Script::Variable	:@underscored_name"scale_z:
@name"scale-z:@options{ :
@linei!0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i!:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	i!o:Sass::Script::Funcall
;"scaleZ:@keywords{ ;@	;	i!:
@args[o; 	;"scale_z;"scale-z;@	;	i!;	i![u;L[o:Sass::Script::Variable	:@underscored_name"scale_z:
@name"scale-z:@options{ :
@lineiu:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:
@name"
trans:@options{ :@guarded0:@children[ :
@linei:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Variable	:@underscored_name"
trans;"
trans;@	;
io:Sass::Script::Funcall
;"
scale:@keywords{ ;@	;
i:
@args[o;	;"scale_x;"scale-x;@	;
io;	;"scale_y;"scale-y;@	;
i;
i[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	io:Sass::Script::Funcall
;"scale3d:@keywords{ ;@	;	i:
@args[o; 	;"scale_x;"scale-x;@	;	io; 	;"scale_y;"scale-y;@	;	io; 	;"scale_z;"scale-z;@	;	i;	io;;@;0;	[ ;["/* rotate */;i$;i u;%{[o:Sass::Script::Variable	:@underscored_name"rotate_x:
@name"rotate-x:@options{ :
@linei%0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i%:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	i%o:Sass::Script::Funcall
;"rotateX:@keywords{ ;@	;	i%:
@args[o; 	;"rotate_x;"rotate-x;@	;	i%;	i%u;%{[o:Sass::Script::Variable	:@underscored_name"rotate_y:
@name"rotate-y:@options{ :
@linei&0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i&:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	i&o:Sass::Script::Funcall
;"rotateY:@keywords{ ;@	;	i&:
@args[o; 	;"rotate_y;"rotate-y;@	;	i&;	i&u;%{[o:Sass::Script::Variable	:@underscored_name"rotate_z:
@name"rotate-z:@options{ :
@linei'0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i':
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	i'o:Sass::Script::Funcall
;"rotateZ:@keywords{ ;@	;	i':
@args[o; 	;"rotate_z;"rotate-z;@	;	i';	i'u;%|[o:Sass::Script::Variable	:@underscored_name"rotate3d:
@name"rotate3d:@options{ :
@linei(0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i(:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	i(o:Sass::Script::Funcall
;"rotate3d:@keywords{ ;@	;	i(:
@args[o; 	;"rotate3d;"rotate3d;@	;	i(;	i(o;;@;0;	[ ;["/* translate */;i*;i u;%Þ[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:@underscored_name"trans_y:
@name"trans-y:@options{ :
@linei+:@operand1o;	;"trans_x;	"trans-x;
@
;i+;
@
;i+:@operator:andu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:@underscored_name"trans_x:
@name"trans-x:@options{ :
@linei/0[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i/:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	i/o:Sass::Script::Funcall
;"translateX:@keywords{ ;@	;	i/:
@args[o; 	;"trans_x;"trans-x;@	;	i/;	i/u; z[o:Sass::Script::Variable	:@underscored_name"trans_y:
@name"trans-y:@options{ :
@linei00[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i0:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	i0o:Sass::Script::Funcall
;"translateY:@keywords{ ;@	;	i0:
@args[o; 	;"trans_y;"trans-y;@	;	i0;	i0u; z[o:Sass::Script::Variable	:@underscored_name"trans_z:
@name"trans-z:@options{ :
@linei10[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i1:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	i1o:Sass::Script::Funcall
;"translateZ:@keywords{ ;@	;	i1:
@args[o; 	;"trans_z;"trans-z;@	;	i1;	i1[u;T[o:Sass::Script::Variable	:@underscored_name"trans_z:
@name"trans-z:@options{ :
@linei,u:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:
@name"
trans:@options{ :@guarded0:@children[ :
@linei-:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o:Sass::Script::Variable	:@underscored_name"
trans;"
trans;@	;
i-o:Sass::Script::Funcall
;"translate:@keywords{ ;@	;
i-:
@args[o;	;"trans_x;"trans-x;@	;
i-o;	;"trans_y;"trans-y;@	;
i-;
i-[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i,:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	i,o:Sass::Script::Funcall
;"translate3d:@keywords{ ;@	;	i,:
@args[o; 	;"trans_x;"trans-x;@	;	i,o; 	;"trans_y;"trans-y;@	;	i,o; 	;"trans_z;"trans-z;@	;	i,;	i,o;;@;0;	[ ;["/* skew */;i4;i u;%[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:@underscored_name"skew_y:
@name"skew-y:@options{ :
@linei5:@operand1o;	;"skew_x;	"skew-x;
@
;i5;
@
;i5:@operator:andu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:@underscored_name"skew_x:
@name"skew-x:@options{ :
@linei70[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i7:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	i7o:Sass::Script::Funcall
;"
skewX:@keywords{ ;@	;	i7:
@args[o; 	;"skew_x;"skew-x;@	;	i7;	i7u; q[o:Sass::Script::Variable	:@underscored_name"skew_y:
@name"skew-y:@options{ :
@linei80[o:Sass::Tree::VariableNode;"
trans;@	:@guarded0:@children[ ;	i8:
@expro:Sass::Script::List	:@separator:
space;@	:@value[o; 	;"
trans;"
trans;@	;	i8o:Sass::Script::Funcall
;"
skewY:@keywords{ ;@	;	i8:
@args[o; 	;"skew_y;"skew-y;@	;	i8;	i8[o:Sass::Tree::VariableNode;	"
trans;
@
:@guarded0:@children[ ;i5:
@expro:Sass::Script::List	:@separator:
space;
@
:@value[o;	;"
trans;	"
trans;
@
;i5o:Sass::Script::Funcall
;	"	skew:@keywords{ ;
@
;i5:
@args[o;	;"skew_x;	"skew-x;
@
;i5o;	;"skew_y;	"skew-y;
@
;i5;i5o;;@;0;	[ ;["/* apply it! */;i;;i o;*;"transform; { ;@;	[ ;i<;![o;	;"
trans;"
trans;@;i<o;	;"only3d;"only3d;@;i<o;*;"transform-origin; { ;@;	[ ;i=;![	o;	;"origin_x;"origin-x;@;i=o;	;"origin_y;"origin-y;@;i=o;	;"origin_z;"origin-z;@;i=o;	;"only3d;"only3d;@;i=;i;![[o;;"perspective;"perspective;@o;);@;F;i[o;;"scale_x;"scale-x;@o;);@;F;i[o;;"scale_y;"scale-y;@o;);@;F;i[o;;"scale_z;"scale-z;@o;);@;F;i[o;;"rotate_x;"rotate-x;@o;);@;F;i[o;;"rotate_y;"rotate-y;@o;);@;F;i[o;;"rotate_z;"rotate-z;@o;);@;F;i	[o;;"rotate3d;"rotate3d;@o;);@;F;i
[o;;"trans_x;"trans-x;@o;);@;F;i[o;;"trans_y;"trans-y;@o;);@;F;i[o;;"trans_z;"trans-z;@o;);@;F;i[o;;"skew_x;"skew-x;@o;);@;F;i[o;;"skew_y;"skew-y;@o;);@;F;i[o;;"origin_x;"origin-x;@o;);@;F;i[o;;"origin_y;"origin-y;@o;);@;F;i[o;;"origin_z;"origin-z;@o;);@;F;i[o;;"only3d;"only3d;@o;);@;F;io;;@;0;	[ ;["q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */;iA;i o;;"simple-transform;T;@;	[o;*;"create-transform; { ;@;	[ ;iU;![o;);@;F;iNo;	;"
scale;"
scale;@;iOo;	;"
scale;"
scale;@;iOo;);@;F;iOo;);@;F;iPo;);@;F;iPo;	;"rotate;"rotate;@;iPo;);@;F;iPo;	;"trans_x;"trans-x;@;iQo;	;"trans_y;"trans-y;@;iQo;);@;F;iQo;	;"skew_x;"skew-x;@;iRo;	;"skew_y;"skew-y;@;iRo;	;"origin_x;"origin-x;@;iSo;	;"origin_y;"origin-y;@;iSo;);@;F;iSo;);@;F;iT;iL;![[o;;"
scale;"
scale;@o;);@;F;iD[o;;"rotate;"rotate;@o;);@;F;iE[o;;"trans_x;"trans-x;@o;);@;F;iF[o;;"trans_y;"trans-y;@o;);@;F;iG[o;;"skew_x;"skew-x;@o;);@;F;iH[o;;"skew_y;"skew-y;@o;);@;F;iI[o;;"origin_x;"origin-x;@o;);@;F;iJ[o;;"origin_y;"origin-y;@o;);@;F;iK;i